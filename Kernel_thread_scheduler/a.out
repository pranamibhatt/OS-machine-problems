14,17c14,16
<     NOTE: REMEMBER THAT AT THE VERY BEGINNING WE DON'T HAVE A MEMORY MANAGER. 
<           OBJECT THEREFORE HAVE TO BE ALLOCATED ON THE STACK. 
<           THIS LEADS TO SOME RATHER CONVOLUTED CODE, WHICH WOULD BE MUCH 
<           SIMPLER OTHERWISE.
---
>     NOTE: REMEMBER THAT WE DON'T HAVE A MEMORY MANAGER. OBJECT THEREFORE
>           HAVE TO BE ALLOCATED ON THE STACK. THIS LEADS TO SOME RATHER
>           CONVOLUTED CODE, WHICH WOULD BE MUCH SIMPLER OTHERWISE.
46d44
< #include "machine.H"         /* LOW-LEVEL STUFF   */
65a64,74
> /* EXCEPTION HANDLERS */
> /*--------------------------------------------------------------------------*/
> 
> /* -- EXAMPLE OF THE DIVISION-BY-ZERO HANDLER */
> 
> void dbz_handler(REGS * r) {
>     Console::puts("DIVISION BY ZERO!\n");
>     for(;;);
> }
> 
> /*--------------------------------------------------------------------------*/
104c113
<         SYSTEM_SCHEDULER->resume(Thread::CurrentThread());
---
>         SYSTEM_SCHEDULER->resume(thread_get_current());
224c233
<     ExceptionHandler::init_dispatcher();
---
>     init_exception_dispatcher();
226c235
<     InterruptHandler::init_dispatcher();
---
>     init_interrupt_dispatcher();
230,238c239
<     class DBZ_Handler : public ExceptionHandler {
<       public:
<       virtual void handle_exception(REGS * _regs) {
<         Console::puts("DIVISION BY ZERO!\n");
<         for(;;);
<       }
<     } dbz_handler;
< 
<     ExceptionHandler::register_handler(0, &dbz_handler);
---
>     register_exception_handler(0, dbz_handler);
260,262c261,263
<     SimpleTimer timer(100); /* timer ticks every 10ms. */
<     InterruptHandler::register_handler(0, &timer);
<     /* The Timer is implemented as an interrupt handler. */
---
>     SimpleTimer::init(100); /* timer ticks every 10ms. */
>     register_interrupt_handler(0, SimpleTimer::handler);
> 
280c281
<     Machine::enable_interrupts();
---
>     machine_enable_interrupts();
